void addCollisionObjects(moveit::planning_interface::PlanningSceneInterface& planning_scene_interface)
{
  // BEGIN_SUB_TUTORIAL table1
  //
  // Creating Environment
  // ^^^^^^^^^^^^^^^^^^^^
  // Create vector to hold 3 collision objects.
  std::vector<moveit_msgs::CollisionObject> collision_objects;
  collision_objects.resize(3);

  // Add the first table where the cube will originally be kept.
  collision_objects[0].id = "table1";
  //collision_objects[0].header.frame_id = "panda_link0";
  collision_objects[0].header.frame_id = "base_link";

  /* Define the primitive and its dimensions. */
  collision_objects[0].primitives.resize(1);
  collision_objects[0].primitives[0].type = collision_objects[0].primitives[0].BOX;
  collision_objects[0].primitives[0].dimensions.resize(3);
  collision_objects[0].primitives[0].dimensions[0] = 0.017;
  collision_objects[0].primitives[0].dimensions[1] = 0.017;
  collision_objects[0].primitives[0].dimensions[2] = 0.1;









  /* Define the pose of the table. */
  collision_objects[0].primitive_poses.resize(1);
  collision_objects[0].primitive_poses[0].position.x = object_x;
  collision_objects[0].primitive_poses[0].position.y = object_y;
  collision_objects[0].primitive_poses[0].position.z = -0.05;
  collision_objects[0].primitive_poses[0].orientation.w = 1.0;
  // END_SUB_TUTORIAL

  collision_objects[0].operation = collision_objects[0].ADD;











  // BEGIN_SUB_TUTORIAL table2
  // Add the second table where we will be placing the cube.
  collision_objects[1].id = "table2";
  //collision_objects[1].header.frame_id = "panda_link0";
  collision_objects[1].header.frame_id = "base_link";

  /* Define the primitive and its dimensions. */
  collision_objects[1].primitives.resize(1);
  collision_objects[1].primitives[0].type = collision_objects[1].primitives[0].BOX;
  collision_objects[1].primitives[0].dimensions.resize(3);
  collision_objects[1].primitives[0].dimensions[0] = 0.017;
  collision_objects[1].primitives[0].dimensions[1] = 0.017;
  collision_objects[1].primitives[0].dimensions[2] = 0.1;

  /* Define the pose of the table. */
  collision_objects[1].primitive_poses.resize(1);
  collision_objects[1].primitive_poses[0].position.x = end_x;
  collision_objects[1].primitive_poses[0].position.y = end_y;
  collision_objects[1].primitive_poses[0].position.z = -0.05;
  collision_objects[1].primitive_poses[0].orientation.w = 1.0;
  // END_SUB_TUTORIAL

  collision_objects[1].operation = collision_objects[1].ADD;




  // BEGIN_SUB_TUTORIAL object
  // Define the object that we will be manipulating
  //collision_objects[2].header.frame_id = "panda_link0";
  collision_objects[2].header.frame_id = "base_link";
  collision_objects[2].id = "object";

  /* Define the primitive and its dimensions. */
  collision_objects[2].primitives.resize(1);
  collision_objects[2].primitives[0].type = collision_objects[1].primitives[0].BOX;
  collision_objects[2].primitives[0].dimensions.resize(3);
  collision_objects[2].primitives[0].dimensions[0] = 0.017;
  collision_objects[2].primitives[0].dimensions[1] = 0.017;
  collision_objects[2].primitives[0].dimensions[2] = 0.089;
  
  
  
  
  
  
  

  /* Define the pose of the object. */
  collision_objects[2].primitive_poses.resize(1);
  collision_objects[2].primitive_poses[0].position.x = object_x;
  collision_objects[2].primitive_poses[0].position.y = object_y;
  collision_objects[2].primitive_poses[0].position.z = object_z;
  collision_objects[2].primitive_poses[0].orientation.w = 1.0;
  
  
  
  
  
  
  
  
  // END_SUB_TUTORIAL

  collision_objects[2].operation = collision_objects[2].ADD;

  planning_scene_interface.applyCollisionObjects(collision_objects);
}
